apiVersion: apps/v1
kind: Deployment
metadata:
  name:  access-control
  namespace: {{.Release.Namespace}}
  labels:
    {{- include "access-control.labels" . | nindent 4 }}
spec:
  progressDeadlineSeconds: 720
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: {{.Values.maxSurge}}
      maxUnavailable: {{.Values.maxUnavailable}}
  selector:
    matchLabels:
      {{- include "access-control.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "access-control.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "access-control.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      terminationGracePeriodSeconds: 30
      initContainers:
        - name: wait-for-mongo
          image: {{ include "common.images.image" (dict "imageRoot" .Values.waitForInitContainer.image "global" .Values.global) }}
          imagePullPolicy: IfNotPresent
          args:
            - "pod"
            - "-lapp=mongodb-replicaset"
        - name: wait-for-redis
          image: {{ include "common.images.image" (dict "imageRoot" .Values.waitForInitContainer.image "global" .Values.global) }}
          imagePullPolicy: IfNotPresent
          args:
            - "pod"
            - "-lapp=redis-sentinel"
      containers:
        - name: access-control
          image: {{ include "common.images.image" (dict "imageRoot" .Values.image "global" .Values.global) }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          readinessProbe:
            httpGet:
              path: /api/health
              port: {{ .Values.service.port }}
            initialDelaySeconds: 200
            timeoutSeconds: 20
            periodSeconds: 10
            failureThreshold: 40
          livenessProbe:
            httpGet:
              path: /api/health
              port: {{ .Values.service.port }}
            initialDelaySeconds: 200
            timeoutSeconds: 20
            periodSeconds: 10
            failureThreshold: 40
          resources:
              {{- toYaml .Values.resources | nindent 12 }}
          ports:
          - name: http
            containerPort: {{.Values.service.port}}
            protocol: "TCP"
          env:
            - name: MONGODB_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.mongoSecrets.userName.name }}
                  key: {{ .Values.mongoSecrets.userName.key }}
            - name: MONGODB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.mongoSecrets.password.name }}
                  key: {{ .Values.mongoSecrets.password.key }}
            - name: MONGODB_HOSTS
              value: {{if .Values.global.ha }}'mongodb-replicaset-chart-0.mongodb-replicaset-chart.{{ .Release.Namespace }}.svc:27017,mongodb-replicaset-chart-1.mongodb-replicaset-chart.{{ .Release.Namespace }}.svc:27017,mongodb-replicaset-chart-2.mongodb-replicaset-chart.{{ .Release.Namespace }}.svc:27017'{{ else }}'mongodb-replicaset-chart-0.mongodb-replicaset-chart.{{ .Release.Namespace }}.svc:27017'{{ end }}
            - name: MONGO_URI
              value: {{ include "harnesscommon.database.mongo" (dict "database" "accesscontrol" "context" $) }}
            - name: OFFSET_STORAGE_FILE_FILENAME
              value: {{ include "harnesscommon.database.mongo" (dict "database" "accesscontrol" "context" $) }}
            - name: IDENTITY_SERVICE_SECRET
              value: 'HVSKUYqD4e5Rxu12hFDdCJKGM64sxgEynvdDhaOHaTHhwwn0K4Ttr0uoOxSsEVYNrUU='
          envFrom:
          - configMapRef:
              name: access-control
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - access-control
            topologyKey: "kubernetes.io/hostname"
      {{- with .Values.affinity }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
